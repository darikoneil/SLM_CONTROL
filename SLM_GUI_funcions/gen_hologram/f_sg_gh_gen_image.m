function holo_phase = f_sg_gh_gen_image(app, pattern, reg1)

f_sg_imageGen_initGS_wrap(app, reg1);

pointer = libpointer('uint8Ptr', zeros(reg1.SLMn*reg1.SLMm,1));

if app.SLM_ops.ImageGen.new_ver
    WFC_ptr = libpointer('uint8Ptr', zeros(reg1.SLMn*reg1.SLMm,1));
    bit_depth = 8;
    RGB = 0;
    
    if strcmpi(pattern, 'piston')
        calllib('ImageGen', 'Generate_Solid',...
                pointer, WFC_ptr,...
                reg1.SLMn, reg1.SLMm, bit_depth,...
                app.BlankPixelValueEditField.Value,...
                RGB);

    elseif strcmpi(pattern, 'blazed')
        calllib('ImageGen', 'Generate_Grating',...
                pointer, WFC_ptr,...
                reg1.SLMn, reg1.SLMm, bit_depth,...
                app.BlazPeriodEditField.Value,...
                app.BlazIncreasingCheckBox.Value,...
                app.BlazHorizontalCheckBox.Value,...
                RGB);
        if app.BlazReverseCheckBox.Value
            pointer.Value = max(pointer.Value) - pointer.Value;
        end
    elseif strcmpi(pattern, 'fresnel')
        calllib('ImageGen', 'Generate_FresnelLens',...
                pointer, WFC_ptr,...
                reg1.SLMn, reg1.SLMm, bit_depth,...
                app.FresCenterXEditField.Value,...
                app.FresCenterYEditField.Value,...
                app.FresRadiusEditField.Value,...
                app.FresPowerEditField.Value,...
                app.FresCylindricalCheckBox.Value,...
                app.FresHorizontalCheckBox.Value,...
                RGB);
    elseif strcmpi(pattern, 'stripes')
        if app.HorizontalstripeCheckBox.Value
            pointer2 = libpointer('uint8Ptr', zeros(reg1.SLMm*reg1.SLMn,1));
            calllib('ImageGen', 'Generate_Stripe',...
                pointer2, WFC_ptr,...
                reg1.SLMm, reg1.SLMn, bit_depth,...
                app.StripePixelValueEditField.Value,...
                app.StripeGrayEditField.Value,...
                app.StripePixelPerStripeEditField.Value,...
                RGB);
            pointer.Value = f_sg_im_to_pointer(f_sg_poiner_to_im(pointer2, reg1.SLMn, reg1.SLMm)');
            
        else
            calllib('ImageGen', 'Generate_Stripe',...
                pointer, WFC_ptr,...
                reg1.SLMn, reg1.SLMm, bit_depth,...
                app.StripePixelValueEditField.Value,...
                app.StripeGrayEditField.Value,...
                app.StripePixelPerStripeEditField.Value,...
                RGB);
        end
    elseif strcmpi(pattern, 'zernike')

        calllib('ImageGen', 'Generate_Zernike',...
                pointer, WFC_ptr,...
                reg1.SLMn, reg1.SLMm, bit_depth,...
                int32(app.CenterXEditField.Value), int32(app.CenterYEditField.Value),...
                int32(app.RadiusEditField.Value), app.PistonEditField.Value,...
                app.TiltXEditField.Value, app.TiltYEditField.Value,...
                app.PowerEditField.Value,...
                app.AstigXEditField.Value, app.AstigYEditField.Value,...
                app.ComaXEditField.Value, app.ComaYEditField.Value,...
                app.PrimarySphericalEditField.Value,...
                app.TrefoilXEditField.Value, app.TrefoilYEditField.Value,...
                app.SecondaryAstigXEditField.Value, app.SecondaryAstigYEditField.Value,...
                app.SecondaryComaXEditField.Value, app.SecondaryComaYEditField.Value,...
                app.SecondarySphericalEditField.Value,...
                app.TetrafoilXEditField.Value, app.TetrafoilYEditField.Value,...
                app.TertiarySphericalEditField.Value,...
                app.QuaternarySphericalEditField.Value,...
                RGB);
    end
else
    if strcmpi(pattern, 'piston')
        calllib('ImageGen', 'Generate_Solid',...
                pointer,...
                reg1.SLMn, reg1.SLMm,...
                app.BlankPixelValueEditField.Value);

    elseif strcmpi(pattern, 'blazed')
        calllib('ImageGen', 'Generate_Grating',...
                pointer,...
                reg1.SLMn, reg1.SLMm,...
                app.BlazPeriodEditField.Value,...
                app.BlazIncreasingCheckBox.Value,...
                app.BlazHorizontalCheckBox.Value);
        if app.BlazReverseCheckBox.Value
            pointer.Value = max(pointer.Value) - pointer.Value;
        end
    elseif strcmpi(pattern, 'fresnel')
        calllib('ImageGen', 'Generate_FresnelLens',...
                pointer,...
                reg1.SLMn, reg1.SLMm,...
                app.FresCenterXEditField.Value,...
                app.FresCenterYEditField.Value,...
                app.FresRadiusEditField.Value,...
                app.FresPowerEditField.Value,...
                app.FresCylindricalCheckBox.Value,...
                app.FresHorizontalCheckBox.Value);
    elseif strcmpi(pattern, 'stripes')
        if app.HorizontalstripeCheckBox.Value
            pointer2 = libpointer('uint8Ptr', zeros(reg1.SLMm*reg1.SLMn,1));
            calllib('ImageGen', 'Generate_Stripe',...
                pointer2,...
                reg1.SLMm, reg1.SLMn,...
                app.StripePixelValueEditField.Value,...
                app.StripeGrayEditField.Value,...
                app.StripePixelPerStripeEditField.Value);
            pointer.Value = f_sg_im_to_pointer(f_sg_poiner_to_im(pointer2, reg1.SLMn, reg1.SLMm)');
        else
            calllib('ImageGen', 'Generate_Stripe',...
                pointer,...
                reg1.SLMn, reg1.SLMm,...
                app.StripePixelValueEditField.Value,...
                app.StripeGrayEditField.Value,...
                app.StripePixelPerStripeEditField.Value);
        end
    elseif strcmpi(pattern, 'zernike')
        calllib('ImageGen', 'Generate_Zernike',...
                pointer,...
                reg1.SLMn, reg1.SLMm,...
                int32(app.CenterXEditField.Value), int32(app.CenterYEditField.Value),...
                int32(app.RadiusEditField.Value), app.PistonEditField.Value,...
                app.TiltXEditField.Value, app.TiltYEditField.Value,...
                app.PowerEditField.Value,...
                app.AstigXEditField.Value, app.AstigYEditField.Value,...
                app.ComaXEditField.Value, app.ComaYEditField.Value,...
                app.PrimarySphericalEditField.Value,...
                app.TrefoilXEditField.Value, app.TrefoilYEditField.Value,...
                app.SecondaryAstigXEditField.Value, app.SecondaryAstigYEditField.Value,...
                app.SecondaryComaXEditField.Value, app.SecondaryComaYEditField.Value,...
                app.SecondarySphericalEditField.Value,...
                app.TetrafoilXEditField.Value, app.TetrafoilYEditField.Value,...
                app.TertiarySphericalEditField.Value,...
                app.QuaternarySphericalEditField.Value);
    end
end

holo_phase = f_sg_poiner_to_im(pointer, reg1.SLMm, reg1.SLMn);

if strcmpi(pattern, 'cross')
    max_dim = max(reg1.SLMn, reg1.SLMm);
    xlm = linspace(-reg1.SLMm/max_dim, reg1.SLMm/max_dim, reg1.SLMm);
    xln = linspace(-reg1.SLMn/max_dim, reg1.SLMn/max_dim, reg1.SLMn);
    [fX, fY] = meshgrid(xln, xlm);
    [theta, ~] = cart2pol(fX, fY);

    ref_ang = app.CrossAngleEditField.Value;

    ref_ang1 = angle(exp(1i*ref_ang));
    ref_ang2 = angle(exp(1i*(ref_ang + pi/2)));
    ref_ang3 = angle(exp(1i*(ref_ang + pi)));
    ref_ang4 = angle(exp(1i*(ref_ang + 3*pi/2)));

    if ref_ang1 < ref_ang2
        pat1 = (theta > ref_ang1).*(theta < ref_ang2);
    else
        pat1 = (theta > ref_ang1)+(theta < ref_ang2);
    end

    if ref_ang3 < ref_ang4
        pat2 = (theta > ref_ang3).*(theta < ref_ang4);
    else
        pat2 = (theta > ref_ang3)+(theta < ref_ang4);
    end

    cross_im_ind = pat1+pat2;

    cross_im = cross_im_ind;
    cross_im(cross_im_ind == 0) = app.CrossPixelValueEditField.Value;
    cross_im(cross_im_ind == 1) = app.CrossGrayEditField.Value;
    
    holo_phase = (cross_im)/255*2*pi;
end

end